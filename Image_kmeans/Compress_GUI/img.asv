function varargout = img(varargin)
% IMG M-file for img.fig
%      IMG, by itself, creates a new IMG or raises the existing
%      singleton*.
%
%      H = IMG returns the handle to a new IMG or the handle to
%      the existing singleton*.
%
%      IMG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in IMG.M with the given input arguments.
%
%      IMG('Property','Value',...) creates a new IMG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before img_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to img_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help img

% Last Modified by GUIDE v2.5 10-Nov-2015 16:58:30

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @img_OpeningFcn, ...
                   'gui_OutputFcn',  @img_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before img is made visible.
function img_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to img (see VARARGIN)

% Choose default command line output for img
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes img wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = img_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double




% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

img_path = get(handles.edit1, 'String');
%disp(img_path);

%img_path now has the path to our inpur image to be compressed

%Compression begin here itself

% For k = 15
X_recovered = run(img_path,15);
imshow(X_recovered , 'Parent', handles.axes1);

%For k = 5

X_recovered = run(img_path,5);
imshow(X_recovered , 'Parent', handles.axes2);

% Self-convergence of k-means
X_recovered = run(img_path,1000);
imshow(X_recovered , 'Parent', handles.axes3);


% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
img_path = get(handles.edit1, 'String');
%disp(img_path);

A = double(imread(img_path));

X_recovered = run(img_path,1);
imshow(X_recovered , 'Parent', handles.axes4);
